name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]  # Ejecuta en nuevos tags (ej: v1.0.0)
  pull_request:
    branches: [ develop ]

env:
  DOCKER_IMAGE: ismaelrendonn/imcapi
  DB_CONTAINER: sqlserver-ci  # Contenedor temporal para pruebas

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong!Passw0rd
        ports:
          - 1433:1433
        options: --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1'" --health-interval 10s
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
      - name: Run unit tests
        run: |
          dotnet test --configuration Release --logger "trx;LogFileName=TestResults.trx" --no-restore
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      docker_version: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4
      - name: Get version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Set default version (dev)
        if: github.ref != '' && !startsWith(github.ref, 'refs/tags/')
        id: set_dev_version
        run: |
          echo "VERSION=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          TAG=${{ steps.get_version.outputs.VERSION || steps.set_dev_version.outputs.VERSION }}
          docker build -t ${{ env.DOCKER_IMAGE }}:$TAG .
          docker push ${{ env.DOCKER_IMAGE }}:$TAG
      - name: Push as latest (only for tags)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.VERSION }} ${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')  # Solo para releases
    runs-on: ubuntu-latest
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.docker_version }}
            docker-compose -f docker-compose.prod.yml up -d
            docker exec ${{ env.DB_CONTAINER }} dotnet ef database update
